#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('hold-my-beer:server');
const http = require('http');
const fs = require('fs');
const path = require('path');
const winston = require('winston');

global.logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({level: 'debug'}),
    new (winston.transports.File)({
      level: 'error',
      filename: path.join(__dirname, '..', 'logs', 'app.log')
    })
  ]
});

const queries = require('../database/queries');

// Load templates

app.locals = Object.assign(app.locals, {
  components: {},
  views: {},
  languages: {}
});

const componentsPath = path.join(__dirname, '..', 'components');
fs.readdirSync(componentsPath).forEach(template => {
  app.locals.components[`${template.split('.')[0]}Component`] =
    fs.readFileSync(path.join(componentsPath, template), {encoding: 'utf8'});
});

const viewsPath = path.join(__dirname, '..', 'views');
fs.readdirSync(viewsPath).forEach(viewTemplate => {
  app.locals.views[viewTemplate.split('.')[0]] =
    fs.readFileSync(path.join(viewsPath, viewTemplate), {encoding: 'utf8'});
});

const languagesPath = path.join(__dirname, '..', 'text');
fs.readdirSync(languagesPath).forEach(language => {
  app.locals.languages[language.split('.')[0]] =
    JSON.parse(fs.readFileSync(path.join(languagesPath, language), {encoding: 'utf8'}));
});

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  // named pipe
  if (isNaN(port)) {
    return val;
  }

  // port number
  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

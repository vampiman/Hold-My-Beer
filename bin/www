#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('hold-my-beer:server');
const http = require('http');
const fs = require('fs');

const hasDBAvailable = global.hasDBAvailable = Boolean(process.env.DB);

if (hasDBAvailable) {
  const pgConfig = {
    host: 'localhost',
    user: 'hmbserver',
    password: fs.readFileSync('db-password', {encoding: 'utf8'}),
    database: 'hmb'
  };

  process.on('unhandledRejection', error => {
    const msg = `${Date.now()} ${error.message} ${error.stack}`;
    console.error(msg);
    fs.appendFile('db.log', msg);
  });

  const Pool = require('pg').Pool;
  global.pgPool = new Pool(pgConfig);
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  // named pipe
  if (isNaN(port)) {
    return val;
  }

  // port number
  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('hold-my-beer:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const winston = require('winston');

global.logger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({level: 'debug'}),
    new (winston.transports.File)({
      level: 'error',
      filename: path.join(__dirname, '..', 'logs', 'app.log')
    })
  ]
});

process.on('unhandledRejection', error => {
  logger.error('Unhandled rejection', error);
});

const queries = require('../database/queries');
const render = require('../render');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let serverHttps;

try {
  const options = {};
  options.key = fs.readFileSync(`${process.env.CERTPATH}/privkey.pem`);
  options.cert = fs.readFileSync(`${process.env.CERTPATH}/fullchain.pem`);
  options.ca = fs.readFileSync(`${process.env.CERTPATH}/chain.pem`);
  serverHttps = https.createServer(options, app);
} catch (err) {
  console.error(err);
}

const serverHttp = http.createServer(app);

serverHttp.listen(port);
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);

serverHttps.listen(443);
serverHttps.on('error', onError);
serverHttps.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  // named pipe
  if (isNaN(port)) return val;
  // port number
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = serverHttp.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
